'use strict'

const VibeOffloadBot = require('../bot')
const customerTypes = require('../customer_types.json')
const Log = require('../../../../libs/log')
const utils = require('../../../../libs/utils')

/*
  * @author Wington Brito
  * @since 04/18/2019
  * @summary This class will be updating the user type id to it's latest value from the source
  * @description The bot will feed from the user-types queue. The user type queue reads from
  *  two diffent bots: Pass Thru Autoship and PassThru user types. The main idea it is like feeding
    this bot from two sources queue. So source (autoship OR users).pipe(OffloadUserTypes).
    Then the main logic/calculation is done by this bot.
*/
class OffloadUserTypesBot extends VibeOffloadBot {
  /*
    * Determine the correct user_type_id then update the DB with it
    * @param {*} the payload from the user-types queue. If it's generated by autoship order bot, it
    *   will look like: {icentris_client: 'BlueX', tree_user_id: 1, autoship_template_id: 1020}.
    *   If the payload it's generated by user-type, it'll look like:
    *   {icentris_client: 'BlueX', tree_user_id: 1, type_id: 2}
  */
  async each (payload) {
    if ([null, '', 0, undefined].indexOf(payload.tree_user_id) > -1) {
      throw new Error(`payload.tree_user_id has an invalid value: '${payload.tree_user_id}'`)
    }

    const types = Object.assign(customerTypes.default, customerTypes[payload.icentris_client])
    let db
    const startAutoshipDate = new Date()
    startAutoshipDate.setDate(startAutoshipDate.getDate() - 31)

    const treeUseId = parseInt(payload.tree_user_id)
    if (!treeUseId) return

    return this.getVibeDB(payload.icentris_client)
      .then(conn => {
        db = conn
        // order_date needs to be within the last 31 days
        const orderDateBegin = utils.formatDate(startAutoshipDate)

        const select = `
          SELECT
            u.user_type_id,
            o.autoship_template_id,
            o.order_date
          FROM tree_users u
          LEFT OUTER JOIN tree_orders o
            ON u.id = o.tree_user_id
            AND o.autoship_template_id > 0
            AND o.order_date >= '${orderDateBegin}'
          LEFT OUTER JOIN tree_orders oo
            ON u.id = oo.tree_user_id
            AND oo.autoship_template_id > 0
            AND oo.order_date >= '${orderDateBegin}'
            AND (o.order_date < oo.order_date OR (o.order_date = oo.order_date AND o.id < oo.id))
          WHERE u.id = ${treeUseId}
            AND oo.id IS NULL
        `
        return db.execute(select)
      })
      .then(rs => {
        rs = rs[0][0]
        let typeId = payload.type_id || rs.user_type_id
        let autoshipId = rs.autoship_template_id
        const orderDate = payload.order_date ? payload.order_date : null

        if (!autoshipId && orderDate && new Date(orderDate) >= new Date(startAutoshipDate)) {
          autoshipId = payload.autoship_template_id
        }

        if (autoshipId > 0 && typeId === types.customer) {
          typeId = types.preferred_customer
        }

        if (typeId === rs.user_type_id) {
          return
        }

        const insert = `
          UPDATE
            tree_users
          SET
            user_type_id = ${typeId}
          WHERE
            id = ${treeUseId}
        `
        return db.execute(insert)
      })
      .catch(err => {
        Log.error(payload.icentris_client, `user_type_id was not upsert for ${payload.icentris_client}`, {
          data: { original: payload }
        })
        throw new Error(err)
      })
  }
}

module.exports = new OffloadUserTypesBot()
